/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 2022  Intel Corporation. All rights reserved.
Your use of Intel Corporation's design tools, logic functions 
and other software and tools, and any partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Intel Program License 
Subscription Agreement, the Intel Quartus Prime License Agreement,
the Intel FPGA IP License Agreement, or other applicable license
agreement, including, without limitation, that your use is for
the sole purpose of programming logic devices manufactured by
Intel and sold by Intel or its authorized distributors.  Please
refer to the applicable agreement for further details, at
https://fpgasoftware.intel.com/eula.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 50.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 1.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("instrucciones")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 12;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("instrucciones[11]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "instrucciones";
}

SIGNAL("instrucciones[10]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "instrucciones";
}

SIGNAL("instrucciones[9]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "instrucciones";
}

SIGNAL("instrucciones[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "instrucciones";
}

SIGNAL("instrucciones[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "instrucciones";
}

SIGNAL("instrucciones[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "instrucciones";
}

SIGNAL("instrucciones[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "instrucciones";
}

SIGNAL("instrucciones[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "instrucciones";
}

SIGNAL("instrucciones[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "instrucciones";
}

SIGNAL("instrucciones[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "instrucciones";
}

SIGNAL("instrucciones[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "instrucciones";
}

SIGNAL("instrucciones[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "instrucciones";
}

SIGNAL("mov")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 9;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("mov[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "mov";
}

SIGNAL("mov[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "mov";
}

SIGNAL("mov[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "mov";
}

SIGNAL("mov[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "mov";
}

SIGNAL("mov[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "mov";
}

SIGNAL("mov[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "mov";
}

SIGNAL("mov[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "mov";
}

SIGNAL("mov[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "mov";
}

SIGNAL("mov[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "mov";
}

SIGNAL("p1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 9;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("p1[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "p1";
}

SIGNAL("p1[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "p1";
}

SIGNAL("p1[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "p1";
}

SIGNAL("p1[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "p1";
}

SIGNAL("p1[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "p1";
}

SIGNAL("p1[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "p1";
}

SIGNAL("p1[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "p1";
}

SIGNAL("p1[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "p1";
}

SIGNAL("p1[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "p1";
}

SIGNAL("p2")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 9;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("p2[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "p2";
}

SIGNAL("p2[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "p2";
}

SIGNAL("p2[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "p2";
}

SIGNAL("p2[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "p2";
}

SIGNAL("p2[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "p2";
}

SIGNAL("p2[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "p2";
}

SIGNAL("p2[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "p2";
}

SIGNAL("p2[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "p2";
}

SIGNAL("p2[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "p2";
}

SIGNAL("player")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 9;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("player[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "player";
}

SIGNAL("player[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "player";
}

SIGNAL("player[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "player";
}

SIGNAL("player[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "player";
}

SIGNAL("player[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "player";
}

SIGNAL("player[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "player";
}

SIGNAL("player[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "player";
}

SIGNAL("player[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "player";
}

SIGNAL("player[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "player";
}

SIGNAL("rst")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 0.2;
		}
	}
}

TRANSITION_LIST("instrucciones[11]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 0.6;
			LEVEL 1 FOR 3.6;
			LEVEL 0 FOR 1.2;
			LEVEL 1 FOR 10.8;
			LEVEL 0 FOR 1.2;
			LEVEL 1 FOR 2.4;
			LEVEL 0 FOR 1.2;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 8.4;
			LEVEL 1 FOR 5.6;
			LEVEL 0 FOR 1.2;
			LEVEL 1 FOR 2.4;
			LEVEL 0 FOR 1.2;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 7.8;
		}
	}
}

TRANSITION_LIST("instrucciones[10]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 0.6;
			LEVEL 1 FOR 3.6;
			LEVEL 0 FOR 2.4;
			LEVEL 1 FOR 9.6;
			LEVEL 0 FOR 2.4;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 10.8;
			LEVEL 1 FOR 5.6;
			LEVEL 0 FOR 2.4;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 10.2;
		}
	}
}

TRANSITION_LIST("instrucciones[9]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 4.2;
			LEVEL 1 FOR 8.4;
			LEVEL 0 FOR 3.6;
			LEVEL 1 FOR 6.0;
			LEVEL 0 FOR 8.4;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 3.6;
			LEVEL 1 FOR 6.0;
			LEVEL 0 FOR 7.8;
		}
	}
}

TRANSITION_LIST("instrucciones[8]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 0.6;
			LEVEL 1 FOR 6.0;
			LEVEL 0 FOR 1.2;
			LEVEL 1 FOR 10.8;
			LEVEL 0 FOR 1.2;
			LEVEL 1 FOR 2.4;
			LEVEL 0 FOR 8.4;
			LEVEL 1 FOR 8.0;
			LEVEL 0 FOR 1.2;
			LEVEL 1 FOR 2.4;
			LEVEL 0 FOR 7.8;
		}
	}
}

TRANSITION_LIST("instrucciones[7]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("instrucciones[6]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("instrucciones[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 10.8;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 3.6;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 14.0;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 3.6;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 9.0;
		}
	}
}

TRANSITION_LIST("instrucciones[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 1.8;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 1.2;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 8.4;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 1.2;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 16.4;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 1.2;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 12.6;
		}
	}
}

TRANSITION_LIST("instrucciones[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 0.6;
			LEVEL 1 FOR 3.6;
			LEVEL 0 FOR 8.4;
			LEVEL 1 FOR 3.6;
			LEVEL 0 FOR 16.4;
			LEVEL 1 FOR 3.6;
			LEVEL 0 FOR 13.8;
		}
	}
}

TRANSITION_LIST("instrucciones[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("instrucciones[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 1.8;
			LEVEL 1 FOR 2.4;
			LEVEL 0 FOR 2.4;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 6.0;
			LEVEL 1 FOR 2.4;
			LEVEL 0 FOR 2.4;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 1.2;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 11.6;
			LEVEL 1 FOR 2.4;
			LEVEL 0 FOR 2.4;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 1.2;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 7.8;
		}
	}
}

TRANSITION_LIST("instrucciones[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 0.6;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 1.2;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 1.2;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 6.0;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 1.2;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 1.2;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 14.0;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 1.2;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 1.2;
			LEVEL 1 FOR 1.2;
			LEVEL 0 FOR 11.4;
		}
	}
}

TRANSITION_LIST("mov[8]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("mov[7]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("mov[6]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("mov[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("mov[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("mov[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("mov[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("mov[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 12.2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 17.8;
		}
	}
}

TRANSITION_LIST("mov[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 0.2;
			LEVEL 1 FOR 12.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 17.8;
		}
	}
}

TRANSITION_LIST("p1[8]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("p1[7]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("p1[6]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("p1[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("p1[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("p1[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("p1[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("p1[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("p1[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("p2[8]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("p2[7]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("p2[6]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("p2[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("p2[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("p2[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("p2[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("p2[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("p2[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("player[8]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("player[7]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("player[6]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("player[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("player[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("player[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("player[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
		}
	}
}

TRANSITION_LIST("player[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 12.0;
			LEVEL 1 FOR 19.0;
			LEVEL 0 FOR 19.0;
		}
	}
}

TRANSITION_LIST("player[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 12.0;
			LEVEL 0 FOR 19.0;
			LEVEL 1 FOR 19.0;
		}
	}
}

TRANSITION_LIST("rst")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 50.0;
		}
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "instrucciones";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
	CHILDREN = 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13;
}

DISPLAY_LINE
{
	CHANNEL = "instrucciones[11]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "instrucciones[10]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "instrucciones[9]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "instrucciones[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "instrucciones[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "instrucciones[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "instrucciones[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "instrucciones[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "instrucciones[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "instrucciones[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "instrucciones[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "instrucciones[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "mov";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 0;
	CHILDREN = 15, 16, 17, 18, 19, 20, 21, 22, 23;
}

DISPLAY_LINE
{
	CHANNEL = "mov[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "mov[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "mov[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "mov[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "mov[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "mov[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "mov[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "mov[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "mov[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "p1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 24;
	TREE_LEVEL = 0;
	CHILDREN = 25, 26, 27, 28, 29, 30, 31, 32, 33;
}

DISPLAY_LINE
{
	CHANNEL = "p1[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
	PARENT = 24;
}

DISPLAY_LINE
{
	CHANNEL = "p1[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 26;
	TREE_LEVEL = 1;
	PARENT = 24;
}

DISPLAY_LINE
{
	CHANNEL = "p1[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 27;
	TREE_LEVEL = 1;
	PARENT = 24;
}

DISPLAY_LINE
{
	CHANNEL = "p1[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 28;
	TREE_LEVEL = 1;
	PARENT = 24;
}

DISPLAY_LINE
{
	CHANNEL = "p1[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 29;
	TREE_LEVEL = 1;
	PARENT = 24;
}

DISPLAY_LINE
{
	CHANNEL = "p1[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 30;
	TREE_LEVEL = 1;
	PARENT = 24;
}

DISPLAY_LINE
{
	CHANNEL = "p1[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 31;
	TREE_LEVEL = 1;
	PARENT = 24;
}

DISPLAY_LINE
{
	CHANNEL = "p1[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 32;
	TREE_LEVEL = 1;
	PARENT = 24;
}

DISPLAY_LINE
{
	CHANNEL = "p1[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 33;
	TREE_LEVEL = 1;
	PARENT = 24;
}

DISPLAY_LINE
{
	CHANNEL = "p2";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 34;
	TREE_LEVEL = 0;
	CHILDREN = 35, 36, 37, 38, 39, 40, 41, 42, 43;
}

DISPLAY_LINE
{
	CHANNEL = "p2[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 35;
	TREE_LEVEL = 1;
	PARENT = 34;
}

DISPLAY_LINE
{
	CHANNEL = "p2[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 36;
	TREE_LEVEL = 1;
	PARENT = 34;
}

DISPLAY_LINE
{
	CHANNEL = "p2[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 37;
	TREE_LEVEL = 1;
	PARENT = 34;
}

DISPLAY_LINE
{
	CHANNEL = "p2[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 38;
	TREE_LEVEL = 1;
	PARENT = 34;
}

DISPLAY_LINE
{
	CHANNEL = "p2[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 39;
	TREE_LEVEL = 1;
	PARENT = 34;
}

DISPLAY_LINE
{
	CHANNEL = "p2[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 40;
	TREE_LEVEL = 1;
	PARENT = 34;
}

DISPLAY_LINE
{
	CHANNEL = "p2[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 41;
	TREE_LEVEL = 1;
	PARENT = 34;
}

DISPLAY_LINE
{
	CHANNEL = "p2[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 42;
	TREE_LEVEL = 1;
	PARENT = 34;
}

DISPLAY_LINE
{
	CHANNEL = "p2[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 43;
	TREE_LEVEL = 1;
	PARENT = 34;
}

DISPLAY_LINE
{
	CHANNEL = "player";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 44;
	TREE_LEVEL = 0;
	CHILDREN = 45, 46, 47, 48, 49, 50, 51, 52, 53;
}

DISPLAY_LINE
{
	CHANNEL = "player[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 45;
	TREE_LEVEL = 1;
	PARENT = 44;
}

DISPLAY_LINE
{
	CHANNEL = "player[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 46;
	TREE_LEVEL = 1;
	PARENT = 44;
}

DISPLAY_LINE
{
	CHANNEL = "player[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 47;
	TREE_LEVEL = 1;
	PARENT = 44;
}

DISPLAY_LINE
{
	CHANNEL = "player[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 48;
	TREE_LEVEL = 1;
	PARENT = 44;
}

DISPLAY_LINE
{
	CHANNEL = "player[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 49;
	TREE_LEVEL = 1;
	PARENT = 44;
}

DISPLAY_LINE
{
	CHANNEL = "player[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 50;
	TREE_LEVEL = 1;
	PARENT = 44;
}

DISPLAY_LINE
{
	CHANNEL = "player[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 51;
	TREE_LEVEL = 1;
	PARENT = 44;
}

DISPLAY_LINE
{
	CHANNEL = "player[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 52;
	TREE_LEVEL = 1;
	PARENT = 44;
}

DISPLAY_LINE
{
	CHANNEL = "player[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 53;
	TREE_LEVEL = 1;
	PARENT = 44;
}

DISPLAY_LINE
{
	CHANNEL = "rst";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 54;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
